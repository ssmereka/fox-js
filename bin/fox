#!/usr/bin/env node

// ~A Scott Smereka

/* Fox
 * Node script to control the server and other parts of
 * the fox framework.
 */

//**************************************************
//******************** 3rd Party Modules
//**************************************************

/***
 * Optimist 
 * @description A library for command option parsing.
 * @repo https://github.com/substack/node-optimist
 * @license MIT/X11
 */
var argv = require('optimist').argv;

/***
 * Lo-Dash 
 * @description A utility library for consitency, customization, and performance.
 * @repo https://github.com/lodash/lodash
 * @license MIT
 */
var _ = require('lodash');

/***
 * Wrench
 * @description A utility library for recursive file operations in node.js.
 * @repo https://github.com/ryanmcgrath/wrench-js
 * @license MIT
 */
var wrench = require('wrench');

var request = require('request');

var async = require('async')

//**************************************************
//******************** Node.JS Core Modules
//**************************************************

/***
 * Utility
 * @stability 4 - API Frozen
 * @description Utility functions in node.js core.
 * @website http://nodejs.org/api/util.html
 */
var util = require('util');




/* ************************************************** *
 * ******************** Library Variables & Modules
 * ************************************************** */

// Local Modules
var Cli     = require("./cli.js"),
    Config  = require("./config/config.js"),
    Log     = require("./fox_log.js"),
    Package = require('../package.json'),
    Server  = require("./server/server.js"),
    Worker  = require("./worker.js");

var fox;


/**
 * Handle exit from terminal.
 *
 * SIGINT from the terminal is supported on all 
 * platforms, and can usually be generated with 
 * CTRL+C (though this may be configurable). It is 
 * not generated when terminal raw mode is enabled.
 */
process.once("SIGINT", function() {
  // Gracefully kill any children processes
  if(fox && fox.worker) {
    fox.worker.killChildren();
  }

  // Set a timeout of 5 seconds before force closing.
  setTimeout(function() {
    process.exit(0);
  }, 5000);
});



/* ************************************************** *
 * ******************** Fox Main Method
 * ************************************************** */

/**
 * Create a new instance of the fox module used to 
 * control the server.  Once the object is created
 * it will handle all CLI input automatically.
 * then the instance will be returned.
 */
var foxInstance = new Fox(function(err) {
  if(err) {
    console.log(err);
  }

  // Handle commandline input.
  fox.cli.handleCli(argv, fox.config, function(err) {
    if(err) {
      fox.log.error(err["message"] || err);
      exit();
    }
  });
});


/* ************************************************** *
 * ******************** Constructor & Initalization
 * ************************************************** */

function Fox(next) {
  fox = {};
  // Load the fox logger.
  fox.log = Log;



  var cli = new Cli(fox);
  // Load configuration object based off cli input.
  cli.handleConfigCli(new Config(), function(err, _config) {
    if(err) {
      if(next) {
        return next(err);
      }
      fox.log.error(err);
    }

    // After we are finished creating our config object, store it.
    fox.config = _config;

    // Add fox public API methods.
    //fox.execute = execute;
    //fox.addChild = addChild;
    //fox.removeChild = removeChild;

    // Create a list of child processes.
    fox.littleChildren = [];
    fox.exit = function(code) {
      code = (code) ? code : 1;
      process.exit(code);
    };

    fox.worker = new Worker(fox);

    fox.tryRequire = tryRequire;
    fox.package = (Package !== undefined) ? Package : {};

    fox.server   = new Server(fox);
    
    // Update the fox instance stored in the CLI module.
    cli.updateFoxInstance(fox);
    fox.cli = cli;
    
    if(next) {
      next();
    } 
  });
};


/* ************************************************** *
 * ******************** Private API
 * ************************************************** */

/**
 * Attempts to require a file by name synchronously.  This
 * method will do a small, but smart search for the file 
 * and require it.  If the file is not found, then undefined 
 * is returned.
 */
var tryRequire = function(file) {
  if( ! file) {
    return undefined;
  }

  file = (file.charAt(0) != '/') ? '/' + file : file;
  var currentDirectory = "." + file;
  var binDirectory = path.resolve(__dirname, file);

  if(fs.existsSync(currentDirectory)) {
    return require(currentDirectory);
  } else if(fs.existsSync(binDirectory)) {
    return require(binDirectory);
  } else {
    return require(currentDirectory);
  }
}



/**
 * Exit this script with success or a specific error code.
 */
var exit = function(code) {
  code = (code) ? code : 1;
  process.exit(code);
}
